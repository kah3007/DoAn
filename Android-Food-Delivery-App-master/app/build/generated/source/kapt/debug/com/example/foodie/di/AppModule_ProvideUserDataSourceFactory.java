// Generated by Dagger (https://dagger.dev).
package com.example.foodie.di;

import com.example.foodie.data.datasource.UserDataSource;
import com.example.foodie.datastore.LoginPref;
import com.google.firebase.firestore.CollectionReference;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideUserDataSourceFactory implements Factory<UserDataSource> {
  private final AppModule module;

  private final Provider<CollectionReference> collectionUserProvider;

  private final Provider<LoginPref> loginPrefProvider;

  public AppModule_ProvideUserDataSourceFactory(AppModule module,
      Provider<CollectionReference> collectionUserProvider, Provider<LoginPref> loginPrefProvider) {
    this.module = module;
    this.collectionUserProvider = collectionUserProvider;
    this.loginPrefProvider = loginPrefProvider;
  }

  @Override
  public UserDataSource get() {
    return provideUserDataSource(module, collectionUserProvider.get(), loginPrefProvider.get());
  }

  public static AppModule_ProvideUserDataSourceFactory create(AppModule module,
      Provider<CollectionReference> collectionUserProvider, Provider<LoginPref> loginPrefProvider) {
    return new AppModule_ProvideUserDataSourceFactory(module, collectionUserProvider, loginPrefProvider);
  }

  public static UserDataSource provideUserDataSource(AppModule instance,
      CollectionReference collectionUser, LoginPref loginPref) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserDataSource(collectionUser, loginPref));
  }
}
