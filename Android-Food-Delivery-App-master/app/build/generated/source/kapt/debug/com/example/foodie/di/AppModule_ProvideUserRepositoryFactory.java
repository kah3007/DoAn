// Generated by Dagger (https://dagger.dev).
package com.example.foodie.di;

import com.example.foodie.data.datasource.UserDataSource;
import com.example.foodie.data.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final AppModule module;

  private final Provider<UserDataSource> udsProvider;

  public AppModule_ProvideUserRepositoryFactory(AppModule module,
      Provider<UserDataSource> udsProvider) {
    this.module = module;
    this.udsProvider = udsProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, udsProvider.get());
  }

  public static AppModule_ProvideUserRepositoryFactory create(AppModule module,
      Provider<UserDataSource> udsProvider) {
    return new AppModule_ProvideUserRepositoryFactory(module, udsProvider);
  }

  public static UserRepository provideUserRepository(AppModule instance, UserDataSource uds) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(uds));
  }
}
