// Generated by Dagger (https://dagger.dev).
package com.example.foodie.di;

import com.example.foodie.data.datasource.FavoriteDataSource;
import com.example.foodie.data.repository.FavoriteRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideFavoriteRepositoryFactory implements Factory<FavoriteRepository> {
  private final AppModule module;

  private final Provider<FavoriteDataSource> fdsProvider;

  public AppModule_ProvideFavoriteRepositoryFactory(AppModule module,
      Provider<FavoriteDataSource> fdsProvider) {
    this.module = module;
    this.fdsProvider = fdsProvider;
  }

  @Override
  public FavoriteRepository get() {
    return provideFavoriteRepository(module, fdsProvider.get());
  }

  public static AppModule_ProvideFavoriteRepositoryFactory create(AppModule module,
      Provider<FavoriteDataSource> fdsProvider) {
    return new AppModule_ProvideFavoriteRepositoryFactory(module, fdsProvider);
  }

  public static FavoriteRepository provideFavoriteRepository(AppModule instance,
      FavoriteDataSource fds) {
    return Preconditions.checkNotNullFromProvides(instance.provideFavoriteRepository(fds));
  }
}
