// Generated by Dagger (https://dagger.dev).
package com.example.foodie.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.foodie.data.datasource.FavoriteDataSource;
import com.example.foodie.data.datasource.FoodDataSource;
import com.example.foodie.data.datasource.UserDataSource;
import com.example.foodie.data.repository.FavoriteRepository;
import com.example.foodie.data.repository.FoodRepository;
import com.example.foodie.data.repository.UserRepository;
import com.example.foodie.datastore.LoginPref;
import com.example.foodie.retrofit.FoodDao;
import com.example.foodie.room.FavoriteFoodDao;
import com.example.foodie.ui.MainActivity;
import com.example.foodie.ui.fragment.AccountDetailFragment;
import com.example.foodie.ui.fragment.AccountDetailFragment_MembersInjector;
import com.example.foodie.ui.fragment.AccountFragment;
import com.example.foodie.ui.fragment.CartFragment;
import com.example.foodie.ui.fragment.CartFragment_MembersInjector;
import com.example.foodie.ui.fragment.FavoritesFragment;
import com.example.foodie.ui.fragment.FavoritesFragment_MembersInjector;
import com.example.foodie.ui.fragment.HomePageFragment;
import com.example.foodie.ui.fragment.HomePageFragment_MembersInjector;
import com.example.foodie.ui.fragment.LoginFragment;
import com.example.foodie.ui.fragment.LoginFragment_MembersInjector;
import com.example.foodie.ui.fragment.ProductDetailFragment;
import com.example.foodie.ui.fragment.ProductDetailFragment_MembersInjector;
import com.example.foodie.ui.fragment.SignUpFragment;
import com.example.foodie.ui.fragment.SignUpFragment_MembersInjector;
import com.example.foodie.ui.viewmodel.AccountDetailViewModel;
import com.example.foodie.ui.viewmodel.AccountDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.AccountViewModel;
import com.example.foodie.ui.viewmodel.AccountViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.CartViewModel;
import com.example.foodie.ui.viewmodel.CartViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.FavoritesViewModel;
import com.example.foodie.ui.viewmodel.FavoritesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.HomePageViewModel;
import com.example.foodie.ui.viewmodel.HomePageViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.LoginViewModel;
import com.example.foodie.ui.viewmodel.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.ProductDetailViewModel;
import com.example.foodie.ui.viewmodel.ProductDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.foodie.ui.viewmodel.SignUpViewModel;
import com.example.foodie.ui.viewmodel.SignUpViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.firestore.CollectionReference;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerHiltApplication_HiltComponents_SingletonC {
  private DaggerHiltApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public HiltApplication_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(appModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements HiltApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public HiltApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements HiltApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements HiltApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements HiltApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements HiltApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements HiltApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements HiltApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends HiltApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends HiltApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectAccountDetailFragment(AccountDetailFragment accountDetailFragment) {
      injectAccountDetailFragment2(accountDetailFragment);
    }

    @Override
    public void injectAccountFragment(AccountFragment accountFragment) {
    }

    @Override
    public void injectCartFragment(CartFragment cartFragment) {
      injectCartFragment2(cartFragment);
    }

    @Override
    public void injectFavoritesFragment(FavoritesFragment favoritesFragment) {
      injectFavoritesFragment2(favoritesFragment);
    }

    @Override
    public void injectHomePageFragment(HomePageFragment homePageFragment) {
      injectHomePageFragment2(homePageFragment);
    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
      injectLoginFragment2(loginFragment);
    }

    @Override
    public void injectProductDetailFragment(ProductDetailFragment productDetailFragment) {
      injectProductDetailFragment2(productDetailFragment);
    }

    @Override
    public void injectSignUpFragment(SignUpFragment signUpFragment) {
      injectSignUpFragment2(signUpFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @CanIgnoreReturnValue
    private AccountDetailFragment injectAccountDetailFragment2(AccountDetailFragment instance) {
      AccountDetailFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private CartFragment injectCartFragment2(CartFragment instance) {
      CartFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private FavoritesFragment injectFavoritesFragment2(FavoritesFragment instance) {
      FavoritesFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private HomePageFragment injectHomePageFragment2(HomePageFragment instance) {
      HomePageFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LoginFragment injectLoginFragment2(LoginFragment instance) {
      LoginFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ProductDetailFragment injectProductDetailFragment2(ProductDetailFragment instance) {
      ProductDetailFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SignUpFragment injectSignUpFragment2(SignUpFragment instance) {
      SignUpFragment_MembersInjector.injectLoginPref(instance, singletonCImpl.provideLoginPrefProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends HiltApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends HiltApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(AccountDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AccountViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CartViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FavoritesViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomePageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProductDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SignUpViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends HiltApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AccountDetailViewModel> accountDetailViewModelProvider;

    private Provider<AccountViewModel> accountViewModelProvider;

    private Provider<CartViewModel> cartViewModelProvider;

    private Provider<FavoritesViewModel> favoritesViewModelProvider;

    private Provider<HomePageViewModel> homePageViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<ProductDetailViewModel> productDetailViewModelProvider;

    private Provider<SignUpViewModel> signUpViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.accountDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.accountViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.cartViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.favoritesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.homePageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.productDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.signUpViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(8).put("com.example.foodie.ui.viewmodel.AccountDetailViewModel", ((Provider) accountDetailViewModelProvider)).put("com.example.foodie.ui.viewmodel.AccountViewModel", ((Provider) accountViewModelProvider)).put("com.example.foodie.ui.viewmodel.CartViewModel", ((Provider) cartViewModelProvider)).put("com.example.foodie.ui.viewmodel.FavoritesViewModel", ((Provider) favoritesViewModelProvider)).put("com.example.foodie.ui.viewmodel.HomePageViewModel", ((Provider) homePageViewModelProvider)).put("com.example.foodie.ui.viewmodel.LoginViewModel", ((Provider) loginViewModelProvider)).put("com.example.foodie.ui.viewmodel.ProductDetailViewModel", ((Provider) productDetailViewModelProvider)).put("com.example.foodie.ui.viewmodel.SignUpViewModel", ((Provider) signUpViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.foodie.ui.viewmodel.AccountDetailViewModel 
          return (T) new AccountDetailViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          case 1: // com.example.foodie.ui.viewmodel.AccountViewModel 
          return (T) new AccountViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          case 2: // com.example.foodie.ui.viewmodel.CartViewModel 
          return (T) new CartViewModel(singletonCImpl.provideFoodRepositoryProvider.get());

          case 3: // com.example.foodie.ui.viewmodel.FavoritesViewModel 
          return (T) new FavoritesViewModel(singletonCImpl.provideFoodRepositoryProvider.get(), singletonCImpl.provideFavoriteRepositoryProvider.get());

          case 4: // com.example.foodie.ui.viewmodel.HomePageViewModel 
          return (T) new HomePageViewModel(singletonCImpl.provideFoodRepositoryProvider.get(), singletonCImpl.provideFavoriteRepositoryProvider.get());

          case 5: // com.example.foodie.ui.viewmodel.LoginViewModel 
          return (T) new LoginViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          case 6: // com.example.foodie.ui.viewmodel.ProductDetailViewModel 
          return (T) new ProductDetailViewModel(singletonCImpl.provideFoodRepositoryProvider.get(), singletonCImpl.provideFavoriteRepositoryProvider.get());

          case 7: // com.example.foodie.ui.viewmodel.SignUpViewModel 
          return (T) new SignUpViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends HiltApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends HiltApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends HiltApplication_HiltComponents.SingletonC {
    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<LoginPref> provideLoginPrefProvider;

    private Provider<CollectionReference> provideCollectionReferenceProvider;

    private Provider<UserDataSource> provideUserDataSourceProvider;

    private Provider<UserRepository> provideUserRepositoryProvider;

    private Provider<FoodDao> provideFoodDaoProvider;

    private Provider<FavoriteFoodDao> provideFavoriteFoodDaoProvider;

    private Provider<FavoriteDataSource> provideFavoriteDataSourceProvider;

    private Provider<FoodDataSource> provideFoodDataSourceProvider;

    private Provider<FoodRepository> provideFoodRepositoryProvider;

    private Provider<FavoriteRepository> provideFavoriteRepositoryProvider;

    private SingletonCImpl(AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam) {
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(appModuleParam, applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam) {
      this.provideLoginPrefProvider = DoubleCheck.provider(new SwitchingProvider<LoginPref>(singletonCImpl, 0));
      this.provideCollectionReferenceProvider = DoubleCheck.provider(new SwitchingProvider<CollectionReference>(singletonCImpl, 3));
      this.provideUserDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<UserDataSource>(singletonCImpl, 2));
      this.provideUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserRepository>(singletonCImpl, 1));
      this.provideFoodDaoProvider = DoubleCheck.provider(new SwitchingProvider<FoodDao>(singletonCImpl, 6));
      this.provideFavoriteFoodDaoProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteFoodDao>(singletonCImpl, 8));
      this.provideFavoriteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteDataSource>(singletonCImpl, 7));
      this.provideFoodDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<FoodDataSource>(singletonCImpl, 5));
      this.provideFoodRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FoodRepository>(singletonCImpl, 4));
      this.provideFavoriteRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteRepository>(singletonCImpl, 9));
    }

    @Override
    public void injectHiltApplication(HiltApplication hiltApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.foodie.datastore.LoginPref 
          return (T) AppModule_ProvideLoginPrefFactory.provideLoginPref(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 1: // com.example.foodie.data.repository.UserRepository 
          return (T) AppModule_ProvideUserRepositoryFactory.provideUserRepository(singletonCImpl.appModule, singletonCImpl.provideUserDataSourceProvider.get());

          case 2: // com.example.foodie.data.datasource.UserDataSource 
          return (T) AppModule_ProvideUserDataSourceFactory.provideUserDataSource(singletonCImpl.appModule, singletonCImpl.provideCollectionReferenceProvider.get(), singletonCImpl.provideLoginPrefProvider.get());

          case 3: // com.google.firebase.firestore.CollectionReference 
          return (T) AppModule_ProvideCollectionReferenceFactory.provideCollectionReference(singletonCImpl.appModule);

          case 4: // com.example.foodie.data.repository.FoodRepository 
          return (T) AppModule_ProvideFoodRepositoryFactory.provideFoodRepository(singletonCImpl.appModule, singletonCImpl.provideFoodDataSourceProvider.get());

          case 5: // com.example.foodie.data.datasource.FoodDataSource 
          return (T) AppModule_ProvideFoodDataSourceFactory.provideFoodDataSource(singletonCImpl.appModule, singletonCImpl.provideFoodDaoProvider.get(), singletonCImpl.provideFavoriteDataSourceProvider.get());

          case 6: // com.example.foodie.retrofit.FoodDao 
          return (T) AppModule_ProvideFoodDaoFactory.provideFoodDao(singletonCImpl.appModule);

          case 7: // com.example.foodie.data.datasource.FavoriteDataSource 
          return (T) AppModule_ProvideFavoriteDataSourceFactory.provideFavoriteDataSource(singletonCImpl.appModule, singletonCImpl.provideFavoriteFoodDaoProvider.get());

          case 8: // com.example.foodie.room.FavoriteFoodDao 
          return (T) AppModule_ProvideFavoriteFoodDaoFactory.provideFavoriteFoodDao(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 9: // com.example.foodie.data.repository.FavoriteRepository 
          return (T) AppModule_ProvideFavoriteRepositoryFactory.provideFavoriteRepository(singletonCImpl.appModule, singletonCImpl.provideFavoriteDataSourceProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
